@model Plims.ViewModel.ViewModelAll
@{
    Layout = "_layout";
     ViewBag.Title = "Production Transaction Adjust";
}

<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
<link href="~/css/datatable2.2.0.css" rel="stylesheet" />


@if (TempData.ContainsKey("AlertMessage"))
{
    <script>
        alert('@TempData["AlertMessage"]');
    </script>
}

<style type="text/css">

    .form-control {
        width: 100%;
        height: 70%;
        padding: 6px 10px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #2D2828;
        border-radius: 1px;
        box-sizing: border-box;
    }

    #table_id {
        border: 0.1px solid #A9A9A9; /* Set border style */
        border-collapse: collapse;
        width: 100%;
    }

        #table_id th {
            background-color: #C5C5C5; /* Set your desired header background color */
            font-weight: bold;
            text-align: center;
            font-family: Arial, sans-serif;
            font-size: 14px;
            padding: 15px 0px;
            border-collapse: collapse;
        }

        #table_id td {
            text-align: left;
            font-size: 14px;
        }

        #table_id tr {
            text-align: left;
            padding: initial;
        }

        #table_id th,
        #table_id td {
            border: 0.1px solid #A9A9A9; /* Set border style */
            border-collapse: collapse;
        }

    .selected-row {
        background-color: yellow; /* or any other color you prefer */
    }

</style>
<form method="get" asp-controller="Working" id="tableForm">
<div class="row" style="height:10px"></div>
<h2 class="page-name">Production Transaction Adjust</h2>
<div class="row" style="height:10px"></div>

    <div class="row" style="background-color: #fcfcfc; border-radius: 2px; padding: 10px;">
        <div class="row">
            @* <div class="col-1"></div> *@
            <div class="col-1" style="align-content:center"><label class="FillterLabel">Date:</label></div>
            <div class="col-3">
                <input type="date" class="form-control" name="TransactionDate" id="TransactionDate" value="@ViewBag.SelectedTransactionDate" style="width:100%">

            </div>
            <div class="col-2"></div>
            <div class="col-1" style="align-content:center"><label class="FillterLabel">Line:</label></div>
            <div class="col-3" style="align-content:center;">

                <select class="selectfillter form-control" style="width:100%" name="LineName" id="LineName">
                    <option value="" default selected></option>
                    @foreach (var LineGroup in Model.tbLine.GroupBy(x => x.LineID))
                    {
                        var Line = LineGroup.First(); // Take the first item in the group
                        <option value="@Line.LineID" selected="@(Line.LineID == ViewBag.SelectedLineName ? "selected" : null)">
                            @Html.DisplayFor(modelItem => Line.LineID) : @Html.DisplayFor(modelItem => Line.LineName)
                        </option>

                    }
                </select>


            </div>

        </div>

        <div class="row"></div>
        <div class="row">
            @*   <div class="col-1"></div> *@
            <div class="col-1" style="align-content:center"><label class="FillterLabel">Section:</label></div>
            <div class="col-3">

                <select class="selectfillter form-control" style="width:100%" name="SectionName" id="SectionName">
                    <option value="" default selected></option>
                    @foreach (var lineGroup in Model.tbSection.GroupBy(x => x.SectionID))
                    {
                        var line = lineGroup.First(); // Take the first item in the group
                        <option value="@line.SectionID" selected="@(line.SectionID == ViewBag.SelectedSectionName ? "selected" : null)">
                            @Html.DisplayFor(modelItem => line.SectionID) : @Html.DisplayFor(modelItem => line.SectionName)
                        </option>

                    }
                </select>
            </div>



            <div class="col-2"></div>
            <div class="col-1" style="align-content:center"><label class="FillterLabel">  Shift:</label></div>
            <div class="col-3">

                <select class="selectfillter form-control" style="width:100%" name="Prefix" id="Prefix">
                    <option value="" default selected></option>
                    @foreach (var productGroup in Model.tbShift.GroupBy(x => x.Prefix))
                    {
                        var product = productGroup.First(); // Take the first item in the group
                        <option value="@product.Prefix" selected="@(product.Prefix == ViewBag.SelectedPrefix ? "selected" : null)">
                            @Html.DisplayFor(modelItem => product.Prefix) : @Html.DisplayFor(modelItem => product.Prefix)
                        </option>

                    }
                </select>

            </div>

        </div>


        <div class="row" style="height:10px"></div>
        <div class="row">
            @*   <div class="col-1"></div> *@
            <div class="col-1" style="align-content:center"><label class="FillterLabel">EmployeeID:</label></div>
            <div class="col-3">

                <select class="selectfillter form-control" style="width:100%" name="QRCode" id="QRCode">
                    <option value="" default selected></option>
                    @foreach (var lineGroup in Model.tbEmployeeMaster.GroupBy(x => x.EmployeeID))
                    {
                        var line = lineGroup.First(); // Take the first item in the group
                        <option value="@line.EmployeeID" selected="@(line.EmployeeID == ViewBag.SelectedEmployeeID ? "selected" : null)">
                            @Html.DisplayFor(modelItem => line.EmployeeID) : @Html.DisplayFor(modelItem => line.EmployeeName)
                        </option>

                    }
                </select>
            </div>



            <div class="col-2"></div>
            <div class="col-1" style="align-content:center"></div>
            <div class="col-3">
            </div>

        </div>


    </div>


    <div class="row" style="height:20px"></div>
    <div class="row" style="height:40px">

        <div class="col" style="width:15% ">
            <button class="clear-button" type="submit" value="clear" asp-action="ProductionTransactionAdjustClearByEmployee" name="submit">
                Clear
            </button>

        </div>
        @*         <div class="col-8" style="width:55% ">
        </div> *@
        <div class="col" style="width:15% ">
            <button class="search-button" type="submit" value="search" asp-action="ProductionTransactionAdjustByEmployee" name="submit">
                Search
            </button>
        </div>
        <div class="col-4" style="width:55% ">
        </div>

        <div class="col" style="width:15% ">
            <button type="button" class="create-button" data-bs-toggle="modal" data-bs-target="#FGModal" onclick="setFGModalData()"  style="justify-content: flex-end">
                FG Adjust
            </button>
        </div>
        <div class="col" style="width:15% ">
            <button type="button" class="create-button" data-bs-toggle="modal" data-bs-target="#DefectModal" onclick="setDefectModalData()" style="justify-content: flex-end">
                Defect Adjust
            </button>
        </div>
    </div>



    <div class="row" style="height:20px"></div>

    @*//////////////////////////////////////Diaplay data tabel ////////////////////////////////////////*@
    <table id="table_id" class="table table-hover ; width:100%">
        <thead style="background-color:lightgrey; width:100%">
            <tr>
                <th><input type="checkbox" id="checkall" name="checkall" /></th>
                <th>
                    Production Date
                </th>
                <th>
                    Plant
                </th>
                <th>
                    Line
                </th>
                <th>
                    Section
                </th>
                <th>
                    EmployeeID
                </th>
                <th style="width: 100px;">
                    Shift
                </th>
                <th style="width: 150px;">
                    Total Hour
                </th>
                <th style="width: 150px;">
                    Total Piece
                </th>
                <th style="width: 150px;">
                    Count QR Code
                </th>
                <th style="width: 150px;">
                    QTY Per QR
                </th>
                <th>
                    Finish Good
                </th>
                <th>
                    Defect All
                </th>
                <th>
                    Yield
                </th>


            </tr>
        </thead>
        <tbody style="width:100%">
            @foreach (var item in Model.view_ProductionTransactionAdjust)
            {
                <tr>
                    @* @Html.HiddenFor(modelItem => item.ID) *@
                  
                    <td>
                        <input type="checkbox" value="@item.TransactionID" class="checkthis" name="TransactionID" />
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TransactionDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PlantName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LineID) : @Html.DisplayFor(modelItem => item.LineID)

                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.SectionID) : @Html.DisplayFor(modelItem => item.SectionName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.QRCode)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Prefix)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.WorkHr)
                    </td>

                    <td>

                        @Html.DisplayFor(modelItem => item.TotalPiece)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CountQty)
                    </td>
                    <td>
                        @string.Format("{0:0.000000}", item.QtyPerQR)
                     @*    @Html.DisplayFor(modelItem => item.QtyPerQR) *@
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FG)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ALLDefect)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Yield)

                    </td>


                </tr>
            }
        </tbody>
    </table>

    <div style="height:20px">
    </div>

</form>






<div class="modal fade" id="FGModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <form method="post" id="modalForm" asp-action="ProductionTransactionAdjustFGByEmployee" asp-controller="Working"> 
            <div class="modal-content">
                <div class="modal-header" style="background-color:blue">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Finish Good Adjust</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <div class="mb-3">
                        <input class="form-control" type="datetime" name="FGPlanDate" id="FGPlanDate" style="background-color:beige" readonly>
                        <input type="text" name="FGEmployeeID" id="FGEmployeeID" hidden>
                    </div>

                    <div class="mb-3">
                        <label class="col-form-label">Line :</label>
                        <input class="form-control" type="text" name="FGLine" id="FGLine" style="background-color:beige" readonly>
                    </div>

                    <div class="mb-3">
                        <label class="col-form-label">Section :</label>
                        <input class="form-control" type="text" name="FGSection" id="FGSection" style="background-color:beige" readonly>
                    </div>

                    <div class="mb-3">
                        <label class="col-form-label">Shift :</label>
                        <input class="form-control" type="text" name="FGShift" id="FGShift" style="background-color:beige" readonly>
                    </div>

                    <div class="mb-3">
                        <label class="col-form-label">FinishGood QTY:</label>
                        <input type="text" class="form-control" id="FGQTY" name="FGQTY" required>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                       <button type="submit" class="btn btn-primary" onclick="submitModalForm()">Adjust</button>
                  
                    </div>
                </div>
            </div>
        </form> 
    </div>
</div>


<div class="modal fade" id="DefectModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <form method="post"  id="modalFormdefect" asp-action="ProductionTransactionAdjustDefectByEmployee" asp-controller="Working">
            <div class="modal-content">
                <div class="modal-header" style="background-color:blue">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Defect Adjust</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">



                    <div class="mb-3">
                        <label class="col-form-label">Production Date:</label>
                        <input class="form-control" type="datetime" name="DefectPlanDate" id="DefectPlanDate" style="background-color:beige" readonly>
                        <input type="text" name="DefectEmployeeID" id="DefectEmployeeID" hidden>
                    </div>
                    <div class="mb-3">
                        <label class="col-form-label">Line :</label>
                        <input class="form-control" type="text" name="DefectLine" id="DefectLine" style="background-color:beige" readonly>
                    </div>

                    <div class="mb-3">
                        <label class="col-form-label">Section :</label>
                        <input class="form-control" type="text" name="DefectSection" id="DefectSection" style="background-color:beige" readonly>
                    </div>
                    <div class="mb-3">
                        <label class="col-form-label">Shift :</label>
                        <input class="form-control" type="text" name="DefectShift" id="DefectShift" style="background-color:beige" readonly>
                    </div>


                    <div class="mb-3">
                        <label class="col-form-label">Defect QTY:</label>
                        <input type="text" class="form-control" id="DefectQTY" Name="DefectQTY" required>
                    </div>


                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="Submit" class="btn btn-primary" onclick="submitModalFormDefect()">Adjust </button>
                    </div>
                </div>
            </div>
        </form> 
    </div>
</div>



 <script>


     ////// FG Adjust //////////////////////////////////////////////////////////
    // Remove row highlight function
    function removeRowHighlight() {
        var rows = document.querySelectorAll('#table_id tbody tr');
        rows.forEach(function (row) {
            row.classList.remove('selected-row');
        });

        
         // Clear modal form fields
    document.getElementById('FGPlanDate').value = '';
    document.getElementById('FGLine').value = '';
    document.getElementById('FGSection').value = '';
    document.getElementById('FGShift').value = '';

    }

    function setFGModalData() {
        var selectedCheckboxes = document.querySelectorAll('#tableForm input[name="TransactionID"]:checked');
        var allCheckboxes = document.querySelectorAll('#tableForm input[name="TransactionID"]');
        var checkAllCheckbox = document.querySelector('#tableForm input[name="checkall"]');

         function formatDate(dateStr) {
        var dateParts = dateStr.split('/');
        var formattedDate = dateParts[1] + '/' + dateParts[0] + '/' + dateParts[2];
        return formattedDate;
    }


        if (selectedCheckboxes.length > 1 && selectedCheckboxes.length < allCheckboxes.length) {
            if (confirm('You have selected more than one item but not all. Do you want to proceed?')) {
                // Set modal data and highlight first row if confirmed
               // var table = document.getElementById('table_id');
               // var firstRow = table.getElementsByTagName('tbody')[0].rows[0];

                removeRowHighlight();
              //  firstRow.classList.add('selected-row');
                var selectedCheckbox = document.querySelector('#tableForm input[name="TransactionID"]:checked');

                var selectedRow = selectedCheckbox.closest('tr');

                var transactionDate = selectedRow.cells[1].innerText;
                var lineName = selectedRow.cells[3].innerText;
                var sectionName = selectedRow.cells[4].innerText;
                var prefix = selectedRow.cells[6].innerText;
                var EmployeeID = selectedRow.cells[5].innerText;

              //  console.log('1');
                console.log(EmployeeID);
                document.getElementById('FGPlanDate').value = Date(transactionDate).toString("dd/MM/yyyy");
                document.getElementById('FGEmployeeID').value = EmployeeID;
                document.getElementById('FGLine').value = lineName;
                document.getElementById('FGSection').value = sectionName;
                document.getElementById('FGShift').value = prefix;

                $('#FGQTY').val('').focus();
            } else {
                // Prevent modal from showing if not confirmed
                return;
            }
        } else {
            // Set modal data and highlight first row if condition not met
           // var table = document.getElementById('table_id');
            //var firstRow = table.getElementsByTagName('tbody')[0].rows[0];

            removeRowHighlight();
           // firstRow.classList.add('selected-row');

            var selectedCheckbox = document.querySelector('#tableForm input[name="TransactionID"]:checked');


            var selectedRow = selectedCheckbox.closest('tr');

            var transactionDate = selectedRow.cells[1].innerText;
            var lineName = selectedRow.cells[3].innerText;
            var sectionName = selectedRow.cells[4].innerText;
            var prefix = selectedRow.cells[6].innerText;
            var EmployeeID = selectedRow.cells[5].innerText;

           // console.log('2');
           // console.log(transactionDate);
            document.getElementById('FGPlanDate').value = formatDate(transactionDate);
            document.getElementById('FGEmployeeID').value = EmployeeID;
            document.getElementById('FGLine').value = lineName;
            document.getElementById('FGSection').value = sectionName;
            document.getElementById('FGShift').value = prefix;

            $('#FGQTY').val('').focus();
        }
    }


    // Event listener to set FG modal data when the button is clicked
    document.querySelector('[data-bs-target="#FGModal"]').addEventListener('click', setFGModalData);


    function submitModalForm() {
        var selectedCheckboxes = document.querySelectorAll('#tableForm input[name="TransactionID"]:checked');
        var modalForm = document.getElementById('modalForm');
        selectedCheckboxes.forEach(function (checkbox) {
            var hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'TransactionID';
            hiddenInput.value = checkbox.value;
            modalForm.appendChild(hiddenInput);
        });
       
      // modalForm.submit();
       // location.reload();

        fetch(modalForm.action, {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('There was an error processing your request.');
                }
            })
            .catch(error => console.error('Error:', error));
    
      
    }

       ////// FG Adjust //////////////////////////////////////////////////////////




    $(document).ready(function () {
        $("#table_id #checkall").click(function () {
            if ($("#table_id #checkall").is(':checked')) {
                $("#table_id input[type=checkbox]").each(function () {
                    $(this).prop("checked", true);
                });

            } else {
                $("#table_id input[type=checkbox]").each(function () {
                    $(this).prop("checked", false);
                });
            }
        });

        $("[data-toggle=tooltip]").tooltip();
    });



    $(document).ready(function () {
        var table = $('#table_id').DataTable({
            dom: 'Bfrtip',
            buttons: ['copy', 'excel', 'pdf'],
            columnDefs: [{
                orderable: false,
                className: 'select-checkbox dt-body-center',
                // className: 'dt-body-right',
                targets: 0,

            }],
            headerCallback: function (thead, data, start, end, display) {
                $(thead).css('background-color', '#d5d5d5');
                $(thead).find('th').css({
                    'text-align': 'center', // Center align column headers
                    'font-family': 'Arial, sans-serif', // Set font family for column headers
                    'font-weight': 'bold', // Set font weight for column headers

                });
            },
            createdRow: function (row, data, dataIndex) {
                $(row).find('td').css({
                    'text-align': 'center' // Center align cell content

                });
            },
            ordering: false,
            searching: false,
            select: {
                style: 'os',
                selector: 'td:first-child'
            },
            order: [[1, 'asc']],
            lengthMenu: [10, 25, 50, 75, 100],
            pageLength: 200
        });

        $('#checkallHeader').click(function () {
            if ($(this).is(':checked')) {
                table.rows().select();
            } else {
                table.rows().deselect();
            }
        });
    });





        ////// Defect Adjust //////////////////////////////////////////////////////////
    // Remove row highlight function
    function removeRowHighlightDefect() {
        var rows = document.querySelectorAll('#table_id tbody tr');
        rows.forEach(function (row) {
            row.classList.remove('selected-row');
        });

        
         // Clear modal form fields
        document.getElementById('DefectPlanDate').value = '';
    document.getElementById('DefectLine').value = '';
    document.getElementById('DefectSection').value = '';
    document.getElementById('DefectShift').value = '';

    }

    function setDefectModalData() {
        var selectedCheckboxes = document.querySelectorAll('#tableForm input[name="TransactionID"]:checked');
        var allCheckboxes = document.querySelectorAll('#tableForm input[name="TransactionID"]');
        var checkAllCheckbox = document.querySelector('#tableForm input[name="checkall"]');


        function formatDate(dateStr) {
            var dateParts = dateStr.split('/');
            var formattedDate = dateParts[1] + '/' + dateParts[0] + '/' + dateParts[2];
            return formattedDate;
        }


        if (selectedCheckboxes.length > 1 && selectedCheckboxes.length < allCheckboxes.length) {
            if (confirm('You have selected more than one item but not all. Do you want to proceed?')) {
                // Set modal data and highlight first row if confirmed
               // var table = document.getElementById('table_id');
               // var firstRow = table.getElementsByTagName('tbody')[0].rows[0];

                removeRowHighlightDefect();
              //  firstRow.classList.add('selected-row');
                var selectedCheckbox = document.querySelector('#tableForm input[name="TransactionID"]:checked');

                var selectedRow = selectedCheckbox.closest('tr');

                var transactionDate = selectedRow.cells[1].innerText;
                var lineName = selectedRow.cells[3].innerText;
                var sectionName = selectedRow.cells[4].innerText;
                var prefix = selectedRow.cells[6].innerText;
                var EmployeeID = selectedRow.cells[5].innerText;

                
                document.getElementById('DefectPlanDate').value = formatDate(transactionDate);
                document.getElementById('DefectLine').value = lineName;
                document.getElementById('DefectSection').value = sectionName;
                document.getElementById('DefectShift').value = prefix;
                document.getElementById('DefectEmployeeID').value = EmployeeID;


                $('#DefectQTY').val('').focus();

            } else {
                // Prevent modal from showing if not confirmed
                return;
            }
        } else {
            // Set modal data and highlight first row if condition not met
           // var table = document.getElementById('table_id');
            //var firstRow = table.getElementsByTagName('tbody')[0].rows[0];

            removeRowHighlightDefect();
           // firstRow.classList.add('selected-row');

            var selectedCheckbox = document.querySelector('#tableForm input[name="TransactionID"]:checked');


            var selectedRow = selectedCheckbox.closest('tr');

            var transactionDate = selectedRow.cells[1].innerText;
            var lineName = selectedRow.cells[3].innerText;
            var sectionName = selectedRow.cells[4].innerText;
            var prefix = selectedRow.cells[6].innerText;
            var EmployeeID = selectedRow.cells[5].innerText;


           // console.log(sectionName.Text);
            document.getElementById('DefectPlanDate').value = formatDate(transactionDate);
            document.getElementById('DefectLine').value = lineName;
            document.getElementById('DefectSection').value = sectionName;
            document.getElementById('DefectShift').value = prefix;
            document.getElementById('DefectEmployeeID').value = EmployeeID;


            $('#DefectQTY').val('').focus();


        }
    }


    // Event listener to set FG modal data when the button is clicked
    document.querySelector('[data-bs-target="#DefectModal"]').addEventListener('click', setDefectModalData);


    function submitModalFormDefect() {
        var selectedCheckboxes = document.querySelectorAll('#tableForm input[name="TransactionID"]:checked');
        var modalForm = document.getElementById('modalFormdefect');
        selectedCheckboxes.forEach(function (checkbox) {
            var hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'TransactionID';
            hiddenInput.value = checkbox.value;
            modalForm.appendChild(hiddenInput);
        });
        
        // modalForm.submit();
        // location.reload();


        
        fetch(modalForm.action, {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('There was an error processing your request.');
                }
            })
            .catch(error => console.error('Error:', error));


    
    }

       ////// Defect Adjust //////////////////////////////////////////////////////////




</script> 
